{"version":3,"sources":["../../../../../../../../home/awilden/work/AS3/laxar/changelog-viewer-server/lib/adapters/github_adapter.es6"],"names":[],"mappings":"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","file":"github_adapter.js","sourcesContent":["/**\n * Copyright 2015 aixigo AG\n * Released under the MIT license.\n */\nimport { Promise } from 'es6-promise';\nimport cachedFetch from '../cached_fetch';\n\n\nexport default ( { category, organization, oauthToken } ) => {\n\n   const urlTemplates = {\n      REPOSITORIES: `https://api.github.com/users/${organization}/repos?per_page=100`,\n      TAGS: `https://api.github.com/repos/${organization}/[repository]/tags?per_page=100`,\n      CHANGELOG: `https://raw.githubusercontent.com/${organization}/[repository]/[branch]/CHANGELOG.md`\n   };\n   const VERSION_MATCHER = /^v(\\d+)\\.(\\d+)\\.(\\d+)$/;\n\n   const { getText, getJson, clearCache } = cachedFetch( 0 );\n   const api = {\n      getRepositories,\n      getRepositoryById,\n      clearCache: clearCache\n   };\n   let headers = { 'user-agent': 'node.js' };\n\n   if( !oauthToken ) {\n      console.warn( `No oauth token for github adapter configured\n                     (category: ${category}, organization: ${organization})` );\n   }\n   else {\n      headers[ 'Authorization' ] = `token ${oauthToken}`;\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function getRepositories() {\n      return getJson( urlTemplates.REPOSITORIES, headers )\n         .then( repositories => repositories.map( createRepository ) );\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function getRepositoryById( repositoryId ) {\n      return getRepositories()\n         .then( repositories => repositories.filter( ( { id } ) => `${repositoryId}` === `${id}` ) )\n         .then( repositories => repositories.length > 0 ? repositories[ 0 ] : null );\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function createRepository( repositoryData ) {\n\n      const proto = {\n         getReleases: () => {\n            const url = urlTemplates.TAGS.replace( '[repository]', repositoryData.name );\n\n            return getJson( url, headers )\n               .then( tags => tags.map( tag => tag.name ) )\n               .then( versions => {\n                  const versionData = versions.reduce( ( acc, version ) => {\n                     const match = VERSION_MATCHER.exec( version );\n                     if( match ) {\n                        const [ name, major, minor, patch ] = match;\n                        const versionTag = `v${major}.${minor}.x`;\n                        if( !( versionTag in acc ) ) {\n                           acc[ versionTag ] = {\n                              versions: [],\n                              title: versionTag\n                           }\n                        }\n\n                        acc[ versionTag ].versions.push( name );\n                     }\n                     return acc;\n                  }, {} );\n\n                  return Object.keys( versionData ).map( key => versionData[ key ] );\n               } );\n         },\n\n\n         getReleaseByVersion: ( version ) => {\n            const baseUrl = urlTemplates.CHANGELOG.replace( '[repository]', repositoryData.name );\n            const releaseUrl = baseUrl.replace( '[branch]', `release-${version}` );\n            return getText( releaseUrl, headers )\n               .then( changelog => {\n                  return {\n                     title: `v${version}`,\n                     changelog: changelog\n                  }\n               }, err => {\n                  console.log( 'rejected:', err );\n               } );\n         }\n      };\n\n      return Object.create( proto, {\n         id: {\n            enumerable: true,\n            value: repositoryData.id\n         },\n         name: {\n            enumerable: true,\n            value: repositoryData.name\n         },\n         pushedAt: {\n            enumerable: true,\n            value: repositoryData.pushed_at\n         },\n         organization: {\n            enumerable: true,\n            value: repositoryData.full_name.split( '/' )[0]\n         }\n      } );\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   return api;\n\n};\n"]}