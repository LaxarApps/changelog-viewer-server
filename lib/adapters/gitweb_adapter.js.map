{"version":3,"sources":["../../../../../../../../home/awilden/work/AS3/laxar/changelog-viewer-server/lib/adapters/gitweb_adapter.es6"],"names":[],"mappings":"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","file":"gitweb_adapter.js","sourcesContent":["/**\n * Copyright 2015 aixigo AG\n * Released under the MIT license.\n */\nimport { Promise } from 'es6-promise';\nimport cachedFetch from '../cached_fetch';\nimport { parseString as parseXmlString } from 'xml2js';\nimport { exec } from 'child_process';\n\n\nexport default ( { serverUrl, repositoriesRoot } ) => {\n\n   const urlTemplates = {\n      REPOSITORIES: `${serverUrl}gitweb/?a=project_index;pf=${repositoriesRoot}`,\n      REPOSITORY: `${serverUrl}gitweb/?p=[repository];a=atom`,\n      REPOSITORY_TAGS: `${serverUrl}gitweb/?p=[repository];a=tags`,\n      CHANGELOG: `${serverUrl}gitweb/?p=[repository];a=blob_plain;f=CHANGELOG.md;hb=refs/heads/[branch]`\n   };\n   const VERSION_MATCHER = /^v(\\d+)\\.(\\d+)\\.(\\d+)$/;\n\n   const { getText, clearCache } = cachedFetch( 0 );\n   const api = {\n      getRepositories,\n      getRepositoryById,\n      clearCache: clearCache\n   };\n   const headers = {};\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function getRepositories() {\n      return getText( urlTemplates.REPOSITORIES, headers )\n         .then( text => {\n            return Promise.all( ( text || '' ).split( '\\n' )\n               .map( line => line.split( ' ' )[0] )\n               .filter( repositoryId => !!repositoryId )\n               .map( repositoryId => getRepositoryById( repositoryId ) ) );\n         } );\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function getRepositoryById( repositoryId ) {\n      const url = urlTemplates.REPOSITORY.replace( '[repository]', repositoryId );\n      return getText( url, headers )\n         .then( text => {\n            if( !text ) {\n               return null;\n            }\n\n            return new Promise( ( resolve, reject ) => {\n               parseXmlString( text, ( err, result ) => err ? reject( err ) : resolve( result ) );\n            } );\n         } )\n         .then( tree => {\n            const updated = ( tree && tree.feed && tree.feed.updated && tree.feed.updated[0] ) || null;\n            // fuzzy logic for organizations: take the path fragment right before the *.git part\n            const [ , organization, name ] = repositoryId.match( /([^\\/]+)\\/([^\\/]+)\\.git$/ );\n            return {\n               id: repositoryId,\n               name: name,\n               organization: organization,\n               pushedAt: updated\n            };\n         } )\n         .then( createRepository );\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   function createRepository( repositoryData ) {\n\n      const proto = {\n         getReleases: () => {\n            const url = urlTemplates.REPOSITORY_TAGS.replace( '[repository]', repositoryData.id );\n            return getText( url, headers )\n               .then( text => {\n                  if( !text ) {\n                     return null;\n                  }\n\n                  return new Promise( ( resolve, reject ) => {\n                     parseXmlString( text, ( err, result ) => err ? reject( err ) : resolve( result ) );\n                  } );\n               } )\n               .then( tree => {\n                  const body = ( tree && tree.html && tree.html.body && tree.html.body[0] );\n                  const table = ( body && body.table && body.table[0] );\n                  const tds = ( table && table.tr && table.tr.map( tr => tr.td && tr.td[1] && tr.td[1] ) );\n                  const as = tds && tds.map( td => td.a && td.a[0] && td.a[0] );\n                  const texts = as && as.map( a => a._ && a._.trim() );\n                  return texts || [];\n               } )\n               .then( tags => {\n                  const versionData = tags.reduce( (acc, tag) => {\n                     const match = VERSION_MATCHER.exec( tag );\n                     if( match ) {\n                        const [ name, major, minor, patch ] = match;\n                        const versionTag = `v${major}.${minor}.x`;\n                        if( !( versionTag in acc ) ) {\n                           acc[ versionTag ] = {\n                              versions: [],\n                              title: versionTag\n                           }\n                        }\n\n                        acc[ versionTag ].versions.push( `refs/tags/${name}` );\n                     }\n                     return acc;\n                  }, {} );\n\n                  return Object.keys( versionData ).map( key => versionData[ key ] );\n               } );\n         },\n\n\n         getReleaseByVersion: ( version ) => {\n            const baseUrl = urlTemplates.CHANGELOG.replace( '[repository]', repositoryData.id );\n            const releaseUrl = baseUrl.replace( '[branch]', `release-${version}` );\n            return getText( releaseUrl, headers )\n               .then( changelog => {\n                  return {\n                     title: `v${version}`,\n                     changelog: changelog\n                  }\n               }, err => {\n                  console.log( 'rejected:', err );\n               } );\n         }\n      };\n\n      let repository = Object.create( proto );\n      Object.keys( repositoryData )\n         .forEach( key => {\n            Object.defineProperty( repository, key, {\n               enumerable: true,\n               value: repositoryData[ key ]\n            } );\n         } );\n      return repository;\n   }\n\n   ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n   return api;\n\n};\n"]}