{"version":3,"sources":["../../../../../../../home/awilden/work/AS3/laxar/changelog-viewer-server/lib/cached_fetch.es6"],"names":[],"mappings":";;;;AAIwB,aAAa;AACnB,YAAY;;AAE9B,IAAM,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;;AAEtB,YAA0B,KAAxB,QAAQ,yDAAC,SAAS;;AAEhC,OAAM,GAAG,GAAG,SAAN,GAAG,WAAS,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAA,CAAC;AACvC,OAAM,UAAU,GAAG,SAAb,UAAU,CAAK,IAAa,OAAX,SAAS,GAAX,IAAa,CAAX,SAAS,QAAQ,SAAS,GAAG,GAAG,EAAE,GAAG,QAAQ,EAAA,CAAC;;AAErE,OAAI,KAAK,GAAG,EAAE,CAAC;;AAEf,OAAM,GAAG,GAAG;AACT,aAAO,EAAE,iBAAE,GAAG,EAAE,OAAO,EAAM;AAC1B,aAAI,QAAQ,GAAG,CAAC,EAAG;AAChB,gBAAM,UAAU,GAAG,KAAK,CAAE,GAAG,CAAE,CAAC;AAChC,gBAAI,UAAU,IAAI,UAAU,CAAE,UAAU,CAAE,EAAG;AAC1C,sBAAO,oBAAQ,OAAO,CAAE,UAAU,CAAC,YAAY,CAAE,CAAC,CACpD,CACH;;;;AAED,gBAAO,4BAAO,GAAG,EAAE,EAAE,OAAO,EAAE,OAAO,IAAI,EAAE,EAAE,CAAE;AAC3C,aAAI,CAAE,UAAA,QAAQ,EAAI;AAChB,gBAAI,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC,OAAO,CAAE,MAAG,QAAQ,CAAC,MAAM,EAAG,MAAM,CAAE,CAAC,CAAE,CAAE,GAAG,CAAC,CAAC,EAAG;AACjE,sBAAO,IAAI,CAAC,CACd;;AACD,mBAAO,QAAQ,CAAC,IAAI,EAAE,CAAC,CACzB,CAAE;;AACF,aAAI,CAAE,UAAA,YAAY,EAAI;AACpB,gBAAI,QAAQ,GAAG,CAAC,EAAG;AAChB,oBAAK,CAAE,GAAG,CAAE,GAAG,EAAE,YAAY,EAAZ,YAAY,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC,CACpD;;AACD,mBAAO,YAAY,CAAC,CACtB,CAAE,CAAC,CACT;;;AACD,aAAO,EAAE,iBAAE,GAAG,EAAE,OAAO,UAAM,GAAG,CAAC,OAAO,CAAE,GAAG,EAAE,OAAO,CAAE,CAAC,IAAI,CAAE,UAAA,IAAI,UAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAE,IAAI,CAAE,GAAG,IAAI,EAAA,CAAE,EAAA;AACzG,gBAAU,EAAE,8BAAM,KAAK,GAAG,EAAE,EAAA,EAC9B,CAAC;;;AAEF,UAAO,GAAG,CAAC,CAEb","file":"cached_fetch.js","sourcesContent":["/**\n * Copyright 2015 aixigo AG\n * Released under the MIT license.\n */\nimport { Promise } from 'es6-promise';\nimport fetch from 'node-fetch';\n\nconst TWO_HOURS = 2 * 60 * 60 * 1000;\n\nexport default ( maxAgeMs=TWO_HOURS ) => {\n\n   const now = () => new Date().getTime();\n   const stillValid = ( { timestamp } ) => timestamp > now() - maxAgeMs;\n\n   let cache = {};\n\n   const api = {\n      getText: ( url, headers ) => {\n         if( maxAgeMs > 0 ) {\n            const cacheEntry = cache[ url ];\n            if( cacheEntry && stillValid( cacheEntry ) ) {\n               return Promise.resolve( cacheEntry.responseData );\n            }\n         }\n\n         return fetch( url, { headers: headers || {} } )\n            .then( response => {\n               if( [ '4', '5' ].indexOf( `${response.status}`.charAt( 0 ) ) > -1 ) {\n                  return null;\n               }\n               return response.text();\n            } )\n            .then( responseData => {\n               if( maxAgeMs > 0 ) {\n                  cache[ url ] = { responseData, timestamp: now() };\n               }\n               return responseData;\n            } );\n      },\n      getJson: ( url, headers ) => api.getText( url, headers ).then( text => text ? JSON.parse( text ) : null ),\n      clearCache: () => cache = {}\n   };\n\n   return api;\n\n}\n"]}